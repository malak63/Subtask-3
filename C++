int speedForward = 120;
int speedTurn = 60;
const int SENSOR_THRESHOLD = 500; // Adjust based on your sensors

// Motor pin definitions
const int LEFT_PWM = 10;
const int RIGHT_PWM = 11;
const int LEFT_DIR1 = 9;
const int LEFT_DIR2 = 8;
const int RIGHT_DIR1 = 7;
const int RIGHT_DIR2 = 6;

// Sensor pins
const int LEFT_SENSOR = 2;
const int RIGHT_SENSOR = 3;

void setup() {
  pinMode(LEFT_PWM, OUTPUT);
  pinMode(RIGHT_PWM, OUTPUT);
  pinMode(LEFT_DIR1, OUTPUT);
  pinMode(LEFT_DIR2, OUTPUT);
  pinMode(RIGHT_DIR1, OUTPUT);
  pinMode(RIGHT_DIR2, OUTPUT);
  
  pinMode(LEFT_SENSOR, INPUT);
  pinMode(RIGHT_SENSOR, INPUT);
  
  // Optional: Initialize serial for debugging
  Serial.begin(9600);
}

void loop() {
  // Wait for start line (both sensors on line)
  while (digitalRead(LEFT_SENSOR) == HIGH || digitalRead(RIGHT_SENSOR) == HIGH) {
    delay(10); // Small delay to prevent busy waiting
  }

  // Line following until finish line
  while (true) {
    int leftSensor = digitalRead(LEFT_SENSOR);
    int rightSensor = digitalRead(RIGHT_SENSOR);

    // Debug output (optional)
    Serial.print("Left: ");
    Serial.print(leftSensor);
    Serial.print(" Right: ");
    Serial.println(rightSensor);

    // Stop at finish line (both sensors on line)
    if (leftSensor == HIGH && rightSensor == HIGH) {
      softStop();
      break;
    }

    // Line following logic
    if (leftSensor == LOW && rightSensor == LOW) {
      forward();
    } else if (leftSensor == LOW && rightSensor == HIGH) {
      turnLeft();
    } else if (leftSensor == HIGH && rightSensor == LOW) {
      turnRight();
    }
    
    delay(10); // Small delay to stabilize
  }
  
  // Optional: Add a delay before restarting or power down
  delay(1000);
}

void forward() {
  setMotor(LEFT_PWM, LEFT_DIR1, LEFT_DIR2, speedForward);
  setMotor(RIGHT_PWM, RIGHT_DIR1, RIGHT_DIR2, speedForward);
}

void turnLeft() {
  setMotor(LEFT_PWM, LEFT_DIR1, LEFT_DIR2, -speedTurn); // Reverse left motor
  setMotor(RIGHT_PWM, RIGHT_DIR1, RIGHT_DIR2, speedForward);
}

void turnRight() {
  setMotor(LEFT_PWM, LEFT_DIR1, LEFT_DIR2, speedForward);
  setMotor(RIGHT_PWM, RIGHT_DIR1, RIGHT_DIR2, -speedTurn); // Reverse right motor
}

void setMotor(int pwmPin, int dir1, int dir2, int speed) {
  if (speed > 0) {
    digitalWrite(dir1, HIGH);
    digitalWrite(dir2, LOW);
    analogWrite(pwmPin, abs(speed));
  } else {
    digitalWrite(dir1, LOW);
    digitalWrite(dir2, HIGH);
    analogWrite(pwmPin, abs(speed));
  }
}

void softStop() {
  analogWrite(LEFT_PWM, 0);
  analogWrite(RIGHT_PWM, 0);
  digitalWrite(LEFT_DIR1, LOW);
  digitalWrite(LEFT_DIR2, LOW);
  digitalWrite(RIGHT_DIR1, LOW);
  digitalWrite(RIGHT_DIR2, LOW);
}
